//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inventory.Domain
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class InventoryDb : DbContext
    {
        public InventoryDb()
            : base("name=InventoryDb")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryBrandMapping> CategoryBrandMappings { get; set; }
        public virtual DbSet<Feature> Features { get; set; }
        public virtual DbSet<Historytransaction> Historytransactions { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<StockingDetail> StockingDetails { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<Userdetail> Userdetails { get; set; }
        public virtual DbSet<Vendor> Vendors { get; set; }
        public virtual DbSet<Tenant> Tenants { get; set; }
    
        public virtual int AddItems(string itemname, string itemdescription, string itemweight, Nullable<decimal> itemprice, Nullable<int> productid, string createdby, Nullable<System.DateTime> createdtime, string lastupdby, Nullable<System.DateTime> lastupddt)
        {
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var itemdescriptionParameter = itemdescription != null ?
                new ObjectParameter("itemdescription", itemdescription) :
                new ObjectParameter("itemdescription", typeof(string));
    
            var itemweightParameter = itemweight != null ?
                new ObjectParameter("itemweight", itemweight) :
                new ObjectParameter("itemweight", typeof(string));
    
            var itempriceParameter = itemprice.HasValue ?
                new ObjectParameter("itemprice", itemprice) :
                new ObjectParameter("itemprice", typeof(decimal));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createdtimeParameter = createdtime.HasValue ?
                new ObjectParameter("createdtime", createdtime) :
                new ObjectParameter("createdtime", typeof(System.DateTime));
    
            var lastupdbyParameter = lastupdby != null ?
                new ObjectParameter("lastupdby", lastupdby) :
                new ObjectParameter("lastupdby", typeof(string));
    
            var lastupddtParameter = lastupddt.HasValue ?
                new ObjectParameter("lastupddt", lastupddt) :
                new ObjectParameter("lastupddt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddItems", itemnameParameter, itemdescriptionParameter, itemweightParameter, itempriceParameter, productidParameter, createdbyParameter, createdtimeParameter, lastupdbyParameter, lastupddtParameter);
        }
    
        public virtual int AddTransactions(string name, Nullable<decimal> amount, Nullable<decimal> totalamt, Nullable<System.DateTime> date, Nullable<int> productid, string createdby, Nullable<System.DateTime> createdtime, string lastupdby, Nullable<System.DateTime> lastupddt)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(decimal));
    
            var totalamtParameter = totalamt.HasValue ?
                new ObjectParameter("totalamt", totalamt) :
                new ObjectParameter("totalamt", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createdtimeParameter = createdtime.HasValue ?
                new ObjectParameter("createdtime", createdtime) :
                new ObjectParameter("createdtime", typeof(System.DateTime));
    
            var lastupdbyParameter = lastupdby != null ?
                new ObjectParameter("lastupdby", lastupdby) :
                new ObjectParameter("lastupdby", typeof(string));
    
            var lastupddtParameter = lastupddt.HasValue ?
                new ObjectParameter("lastupddt", lastupddt) :
                new ObjectParameter("lastupddt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTransactions", nameParameter, amountParameter, totalamtParameter, dateParameter, productidParameter, createdbyParameter, createdtimeParameter, lastupdbyParameter, lastupddtParameter);
        }
    
        public virtual ObjectResult<BrandReport_Result> BrandReport(Nullable<System.DateTime> fromdatetime, Nullable<System.DateTime> todatetime)
        {
            var fromdatetimeParameter = fromdatetime.HasValue ?
                new ObjectParameter("fromdatetime", fromdatetime) :
                new ObjectParameter("fromdatetime", typeof(System.DateTime));
    
            var todatetimeParameter = todatetime.HasValue ?
                new ObjectParameter("todatetime", todatetime) :
                new ObjectParameter("todatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BrandReport_Result>("BrandReport", fromdatetimeParameter, todatetimeParameter);
        }
    
        public virtual ObjectResult<CategorySReport_Result> CategorySReport(Nullable<int> categoryid, Nullable<int> productid, Nullable<int> tenantid)
        {
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var tenantidParameter = tenantid.HasValue ?
                new ObjectParameter("tenantid", tenantid) :
                new ObjectParameter("tenantid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CategorySReport_Result>("CategorySReport", categoryidParameter, productidParameter, tenantidParameter);
        }
    
        public virtual ObjectResult<ConsumptionReport_Result> ConsumptionReport(Nullable<int> prodcutid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> tenantId)
        {
            var prodcutidParameter = prodcutid.HasValue ?
                new ObjectParameter("prodcutid", prodcutid) :
                new ObjectParameter("prodcutid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ConsumptionReport_Result>("ConsumptionReport", prodcutidParameter, startdateParameter, enddateParameter, tenantIdParameter);
        }
    
        public virtual int DelateFeature(Nullable<int> featureid)
        {
            var featureidParameter = featureid.HasValue ?
                new ObjectParameter("featureid", featureid) :
                new ObjectParameter("featureid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelateFeature", featureidParameter);
        }
    
        public virtual int DelateItems(Nullable<int> itemid)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelateItems", itemidParameter);
        }
    
        public virtual int DelateProduct(Nullable<int> productid)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelateProduct", productidParameter);
        }
    
        public virtual int DelateTransactions(Nullable<int> transid)
        {
            var transidParameter = transid.HasValue ?
                new ObjectParameter("transid", transid) :
                new ObjectParameter("transid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DelateTransactions", transidParameter);
        }
    
        public virtual int DeleteBrand(Nullable<int> brandid)
        {
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("brandid", brandid) :
                new ObjectParameter("brandid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteBrand", brandidParameter);
        }
    
        public virtual int DeleteCategory(Nullable<int> categoryid)
        {
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("Categoryid", categoryid) :
                new ObjectParameter("Categoryid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategory", categoryidParameter);
        }
    
        public virtual ObjectResult<FetchReport_Result> FetchReport(Nullable<System.DateTime> fromdatetime, Nullable<System.DateTime> todatetime, Nullable<int> tentantid)
        {
            var fromdatetimeParameter = fromdatetime.HasValue ?
                new ObjectParameter("fromdatetime", fromdatetime) :
                new ObjectParameter("fromdatetime", typeof(System.DateTime));
    
            var todatetimeParameter = todatetime.HasValue ?
                new ObjectParameter("todatetime", todatetime) :
                new ObjectParameter("todatetime", typeof(System.DateTime));
    
            var tentantidParameter = tentantid.HasValue ?
                new ObjectParameter("tentantid", tentantid) :
                new ObjectParameter("tentantid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FetchReport_Result>("FetchReport", fromdatetimeParameter, todatetimeParameter, tentantidParameter);
        }
    
        public virtual ObjectResult<PeriodicReport_Result> PeriodicReport(Nullable<int> productId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> tenatId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var tenatIdParameter = tenatId.HasValue ?
                new ObjectParameter("tenatId", tenatId) :
                new ObjectParameter("tenatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PeriodicReport_Result>("PeriodicReport", productIdParameter, startDateParameter, endDateParameter, tenatIdParameter);
        }
    
        public virtual ObjectResult<ProductReport_Result> ProductReport(Nullable<System.DateTime> fromdatetime, Nullable<System.DateTime> todatetime)
        {
            var fromdatetimeParameter = fromdatetime.HasValue ?
                new ObjectParameter("fromdatetime", fromdatetime) :
                new ObjectParameter("fromdatetime", typeof(System.DateTime));
    
            var todatetimeParameter = todatetime.HasValue ?
                new ObjectParameter("todatetime", todatetime) :
                new ObjectParameter("todatetime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductReport_Result>("ProductReport", fromdatetimeParameter, todatetimeParameter);
        }
    
        public virtual ObjectResult<SiCategoryReport_Result> SiCategoryReport(Nullable<int> categoryid, Nullable<int> tenantid)
        {
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var tenantidParameter = tenantid.HasValue ?
                new ObjectParameter("tenantid", tenantid) :
                new ObjectParameter("tenantid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SiCategoryReport_Result>("SiCategoryReport", categoryidParameter, tenantidParameter);
        }
    
        public virtual ObjectResult<StockingItemsReport_Result> StockingItemsReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> tenantId)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockingItemsReport_Result>("StockingItemsReport", startDateParameter, endDateParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<StockingReport_Result> StockingReport(Nullable<int> productId, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> tenantId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockingReport_Result>("StockingReport", productIdParameter, startDateParameter, endDateParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<StockReport_Result> StockReport(Nullable<int> productId, Nullable<int> tenantId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockReport_Result>("StockReport", productIdParameter, tenantIdParameter);
        }
    
        public virtual ObjectResult<ThreshHold_Result> ThreshHold(Nullable<int> tenantId)
        {
            var tenantIdParameter = tenantId.HasValue ?
                new ObjectParameter("tenantId", tenantId) :
                new ObjectParameter("tenantId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ThreshHold_Result>("ThreshHold", tenantIdParameter);
        }
    
        public virtual ObjectResult<TransactionReport_Result> TransactionReport(Nullable<int> productId, Nullable<System.DateTime> fromdatetime, Nullable<System.DateTime> todatetime, Nullable<int> tenantid)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(int));
    
            var fromdatetimeParameter = fromdatetime.HasValue ?
                new ObjectParameter("fromdatetime", fromdatetime) :
                new ObjectParameter("fromdatetime", typeof(System.DateTime));
    
            var todatetimeParameter = todatetime.HasValue ?
                new ObjectParameter("todatetime", todatetime) :
                new ObjectParameter("todatetime", typeof(System.DateTime));
    
            var tenantidParameter = tenantid.HasValue ?
                new ObjectParameter("tenantid", tenantid) :
                new ObjectParameter("tenantid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransactionReport_Result>("TransactionReport", productIdParameter, fromdatetimeParameter, todatetimeParameter, tenantidParameter);
        }
    
        public virtual int UpdateItems(Nullable<int> itemid, string itemname, string itemdescription, string itemweight, Nullable<decimal> itemprice, Nullable<int> productid, string createdby, Nullable<System.DateTime> createdtime, string lastupdby, Nullable<System.DateTime> lastupddt)
        {
            var itemidParameter = itemid.HasValue ?
                new ObjectParameter("itemid", itemid) :
                new ObjectParameter("itemid", typeof(int));
    
            var itemnameParameter = itemname != null ?
                new ObjectParameter("itemname", itemname) :
                new ObjectParameter("itemname", typeof(string));
    
            var itemdescriptionParameter = itemdescription != null ?
                new ObjectParameter("itemdescription", itemdescription) :
                new ObjectParameter("itemdescription", typeof(string));
    
            var itemweightParameter = itemweight != null ?
                new ObjectParameter("itemweight", itemweight) :
                new ObjectParameter("itemweight", typeof(string));
    
            var itempriceParameter = itemprice.HasValue ?
                new ObjectParameter("itemprice", itemprice) :
                new ObjectParameter("itemprice", typeof(decimal));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var createdbyParameter = createdby != null ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(string));
    
            var createdtimeParameter = createdtime.HasValue ?
                new ObjectParameter("createdtime", createdtime) :
                new ObjectParameter("createdtime", typeof(System.DateTime));
    
            var lastupdbyParameter = lastupdby != null ?
                new ObjectParameter("lastupdby", lastupdby) :
                new ObjectParameter("lastupdby", typeof(string));
    
            var lastupddtParameter = lastupddt.HasValue ?
                new ObjectParameter("lastupddt", lastupddt) :
                new ObjectParameter("lastupddt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateItems", itemidParameter, itemnameParameter, itemdescriptionParameter, itemweightParameter, itempriceParameter, productidParameter, createdbyParameter, createdtimeParameter, lastupdbyParameter, lastupddtParameter);
        }
    }
}
